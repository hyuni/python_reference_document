import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';

export function activate(context: vscode.ExtensionContext) {
    let disposable = vscode.commands.registerCommand('spring-boot-component-generator.generateComponents', async (uri: vscode.Uri) => {
        // 1. 사용자에게 컴포넌트 이름 입력받기
        const componentName = await vscode.window.showInputBox({
            prompt: '생성할 컴포넌트의 이름을 입력하세요 (예: Product)',
            placeHolder: '컴포넌트 이름'
        });

        if (!componentName) {
            vscode.window.showWarningMessage('컴포넌트 이름이 입력되지 않았습니다.');
            return;
        }

        const capitalizedComponentName = componentName.charAt(0).toUpperCase() + componentName.slice(1);
        const lowerCaseComponentName = componentName.charAt(0).toLowerCase() + componentName.slice(1);

        // 2. 파일 생성 기준 경로 (selectedPath) 결정:
        let selectedPath: string | undefined;

        if (uri && uri.scheme === 'file') {
            // Explorer에서 마우스 오른쪽 버튼으로 호출된 경우, 선택된 폴더 경로 사용
            selectedPath = uri.fsPath;
        } else if (vscode.window.activeTextEditor) {
            // 활성 텍스트 에디터가 있는 경우, 해당 파일의 디렉토리 사용
            selectedPath = path.dirname(vscode.window.activeTextEditor.document.uri.fsPath);
        } else {
            // 작업 폴더가 열려 있는 경우, 첫 번째 작업 폴더 사용
            const workspaceFolders = vscode.workspace.workspaceFolders;
            if (workspaceFolders && workspaceFolders.length > 0) {
                selectedPath = workspaceFolders[0].uri.fsPath;
            }
        }

        if (!selectedPath) {
            vscode.window.showErrorMessage('컴포넌트를 생성할 경로를 찾을 수 없습니다. 작업 폴더를 열거나 탐색기에서 폴더를 선택해주세요.');
            return;
        }

        // 3. basePackagePath 및 실제 Java 소스 루트 경로 (rootJavaSourcePath) 결정
        let basePackage: string | undefined;
        let rootJavaSourcePath: string | undefined; // 예: /path/to/myproject/src/main/java

        const javaRootSegment = path.join('src', 'main', 'java');
        const javaRootIndex = selectedPath.indexOf(javaRootSegment);

        if (javaRootIndex !== -1) {
            // 선택된 경로에 src/main/java 가 포함된 경우
            rootJavaSourcePath = selectedPath.substring(0, javaRootIndex + javaRootSegment.length);
            const relativePathFromJavaRoot = selectedPath.substring(javaRootIndex + javaRootSegment.length + path.sep.length);
            basePackage = relativePathFromJavaRoot.replace(/[\\/]/g, '.');

            // 사용자가 추론된 기본 패키지를 확인할 수 있도록 입력 필드를 제공
            const confirmedBasePackage = await vscode.window.showInputBox({
                prompt: '기본 패키지 경로를 확인하거나 수정하세요:',
                value: basePackage,
                placeHolder: 'com.example.myproject'
            });

            if (confirmedBasePackage === undefined) { // 사용자가 취소한 경우
                vscode.window.showWarningMessage('기본 패키지 입력이 취소되었습니다.');
                return;
            }
            basePackage = confirmedBasePackage;

        } else {
            // 선택된 경로에 src/main/java 가 포함되지 않은 경우, 수동 입력 요청
            vscode.window.showWarningMessage(`선택된 경로에 '${javaRootSegment}'가 없습니다. 기본 패키지 경로를 수동으로 입력하세요.`);
            
            basePackage = await vscode.window.showInputBox({
                prompt: '기본 패키지 경로를 입력하세요 (예: com.example.myproject)',
                placeHolder: 'com.example.myproject'
            });

            if (!basePackage) {
                vscode.window.showWarningMessage('기본 패키지 경로가 입력되지 않았습니다.');
                return;
            }
            
            // 수동 입력 시에는 selectedPath를 기준으로 src/main/java/basePackage 폴더를 생성할 수 있도록 rootJavaSourcePath를 구성
            // 이 부분이 중요! selectedPath가 프로젝트 루트일 경우를 고려해야 합니다.
            // 가장 일반적인 시나리오: selectedPath = 프로젝트 루트, rootJavaSourcePath = 프로젝트 루트/src/main/java
            // 또는 selectedPath = src/main/resources 일 경우, rootJavaSourcePath = src/main/java 와 같이 독립적으로 동작해야 함.
            
            // 여기서는 선택된 경로가 프로젝트의 루트이거나,
            // Spring Boot 프로젝트의 일반적인 구조를 따르는 src/main 폴더 내부에 있다고 가정합니다.
            // 가장 안전한 방법은 프로젝트 루트를 찾아서 그 아래에 src/main/java를 붙이는 것입니다.
            const workspaceFolders = vscode.workspace.workspaceFolders;
            if (workspaceFolders && workspaceFolders.length > 0) {
                rootJavaSourcePath = path.join(workspaceFolders[0].uri.fsPath, javaRootSegment);
            } else {
                vscode.window.showErrorMessage('프로젝트 작업 폴더가 열려 있지 않아 기본 Java 소스 경로를 추론할 수 없습니다.');
                return;
            }
        }
        
        // 최종 파일이 생성될 경로 (src/main/java/{basePackage})
        const targetPackageFolder = path.join(rootJavaSourcePath, ...basePackage.split('.'));

        // 4. 템플릿 파일 경로 설정 및 읽기
        const templateDir = path.join(context.extensionPath, 'templates'); // 확장의 'templates' 폴더 경로
        
        const fileTypes = ['DTO', 'Entity', 'Controller', 'Service', 'Repository'];
        const fileContents: { [key: string]: string } = {};

        for (const type of fileTypes) {
            const templateFilePath = path.join(templateDir, `${type}.java.hbs`);
            try {
                let content = fs.readFileSync(templateFilePath, 'utf8');
                // 템플릿 변수 치환
                content = content.replace(/{{basePackage}}/g, basePackage) // 'basePackage'는 이제 항상 정의됨
                                 .replace(/{{capitalizedComponentName}}/g, capitalizedComponentName)
                                 .replace(/{{lowerCaseComponentName}}/g, lowerCaseComponentName);
                fileContents[type] = content;
            } catch (error: any) {
                vscode.window.showErrorMessage(`템플릿 파일 읽기 실패 (${type}): ${error.message}`);
                return; // 템플릿 읽기 실패 시 중단
            }
        }
        
        // 5. 생성될 파일의 최종 경로 구성
        const filePaths = {
            'DTO': path.join(targetPackageFolder, 'dto', `${capitalizedComponentName}DTO.java`),
            'Entity': path.join(targetPackageFolder, 'entity', `${capitalizedComponentName}.java`),
            'Controller': path.join(targetPackageFolder, 'controller', `${capitalizedComponentName}Controller.java`),
            'Service': path.join(targetPackageFolder, 'service', `${capitalizedComponentName}Service.java`),
            'Repository': path.join(targetPackageFolder, 'repository', `${capitalizedComponentName}Repository.java`)
        };

        // 6. 파일 생성
        let filesCreated = 0;
        for (const type of fileTypes) {
            const filePath = filePaths[type as keyof typeof filePaths];
            const content = fileContents[type];

            if (!content) {
                // 템플릿을 읽어오지 못했거나 내용이 비어있는 경우
                vscode.window.showWarningMessage(`템플릿 내용이 없어 파일 생성을 건너뜁니다: ${type}`);
                continue;
            }

            const dir = path.dirname(filePath);
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true }); // 필요한 모든 부모 디렉토리를 재귀적으로 생성
            }

            try {
                fs.writeFileSync(filePath, content);
                filesCreated++;
            } catch (error: any) {
                vscode.window.showErrorMessage(`파일 생성 실패 (${type}): ${error.message}`);
            }
        }

        if (filesCreated > 0) {
            vscode.window.showInformationMessage(`${filesCreated}개의 Spring Boot 컴포넌트가 성공적으로 생성되었습니다!`);
        } else {
            vscode.window.showWarningMessage('생성된 파일이 없습니다.');
        }
    });

    context.subscriptions.push(disposable);
}

export function deactivate() {}